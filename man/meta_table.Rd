% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Meta_table.R
\name{meta_table}
\alias{meta_table}
\title{Umbrella Class for Publication Tables}
\usage{
meta_table(dat, meta = NULL)
}
\arguments{
\item{dat}{A \code{Meta_table}, \code{Mash_table}, \code{\link{Stack_table}},
or anything that can be coerced to a \code{\link{data.table}} with
\code{as.data.table}}

\item{meta}{a \code{\link{tt_meta}} object}
}
\value{
An object of class 'Meta_table'
}
\description{
The \code{meta_table} class does very little by itself except adding a
metadata attributes to a \code{data.frame} and providing a structure for how
you should procede when creating new reports for publication within the gv*
family of packages.
}
\details{
A publication table should be a table that is nearly publication ready. It
should contain (only) the data desired in the final publication document, but
still have the original variable names and levels and accuracy (no rounding)
as in the analysis step. To achive the final publication ready table the
function \code{\link{polish}} should be used.

In practice you will want to create a subclasses of \link{meta_table} for
for each distinct table in your report and implement your own polish methods
for them. Look at the source code of the \code{gvroad} package for examples.
}
\examples{
# Simplified version of how creating and polishing a meta_table could look

\dontrun{
dat <- data.frame(
  name  = c("hans", "franz", "dolores"),
  grade = c(1, 3, 2)
)

dat <- meta_table(
  dat,
  tt_meta(
    "tab1",
    "grades",
    "Grades of the final examination")
)

class(dat) <- c("Meta_tableTab1", class(dat))

polish.Meta_tableTab1 <- function(dat){
 #...
}

polish(dat)
}
}
